package com.cos.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.cos.model.Board;
import com.cos.util.DBClose;

public class BoardDao {
	// 싱글톤으로 만들어야 하는데 그냥 함

	private Connection conn; // 연결
	private PreparedStatement pstmt; // SQL문 작성
	private ResultSet rs; // 커서
	
	
	public int update(Board board) {
		final String SQL = "UPDATE board SET title=?, content=? WHERE id=?";
		
		conn = DBConn.getConnection();
		
		try {
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBClose.close(conn, pstmt);
		}
		
		return -1;
	}
	
	
	
	public int save(Board board) {

		conn = DBConn.getConnection();

		final String SQL = "INSERT INTO board(userId,title,content,createDate) VALUES(?, ?, ?,now())";

		try {
			pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, board.getUserId());
			pstmt.setString(2, board.getTitle());
			pstmt.setString(3, board.getContent());
			int result = pstmt.executeUpdate();
			return result;

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBClose.close(conn, pstmt);
		}

		return -1;
	}
	
	
	//게시물 삭제
	public int delete(int id) {
		final String SQL = "DELETE FROM board WHERE id=?";
		conn = DBConn.getConnection(); //선연결
		
		try {
			pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, id);
			int result = pstmt.executeUpdate();
			return result;	//제거 성공시 result = 1
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBClose.close(conn, pstmt);
		}
		return -1;
	}
	
	
	// 인기리스트 3건 가져오기
	public List<Board> findOrderByReadCountDesc() {
		conn = DBConn.getConnection();
		
		final String SQL = "SELECT * FROM board ORDER BY readCount DESC limit 3";
		List<Board> boards = new ArrayList<Board>();
		try {
			
			pstmt = conn.prepareStatement(SQL);
			rs= pstmt.executeQuery();
			
			while(rs.next()) {
				System.out.println(rs.getInt("id"));
				Board board = new Board();
				
				board.setId(rs.getInt("id"));
				board.setUserId(rs.getInt("userId"));
				board.setTitle(rs.getString("title"));
				board.setContent(rs.getString("content"));
				board.setReadCount(rs.getInt("readCount"));
				board.setCreateDate(rs.getTimestamp("createDate"));
				
				boards.add(board);

			}
			return boards;
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBClose.close(conn, pstmt, rs);
		}

		return null;
	}
	
	
	
	// 리스트 보기 SELECT * FROM board ORDER BY id DESC
	public List<Board> findAll(int page) {
		conn = DBConn.getConnection();
		
		final String SQL = "SELECT * FROM board ORDER BY id DESC limit ?,3";
		List<Board> boards = new ArrayList<Board>();
		try {
			
			pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, (page-1)*3);
			rs= pstmt.executeQuery();
			
			while(rs.next()) {
				System.out.println(rs.getInt("id"));
				Board board = new Board();
				
				board.setId(rs.getInt("id"));
				board.setUserId(rs.getInt("userId"));
				board.setTitle(rs.getString("title"));
				board.setContent(rs.getString("content"));
				board.setReadCount(rs.getInt("readCount"));
				board.setCreateDate(rs.getTimestamp("createDate"));
				
				boards.add(board);

			}
			return boards;
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBClose.close(conn, pstmt, rs);
		}

		return null;
	}

	// 상세 보기 SELECT * FROM board WHERE id = ?
	public Board findById(int id) {

		conn = DBConn.getConnection();

		final String SQL = "SELECT * FROM board WHERE id = ?";
		
		try {
			pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, id);
			rs= pstmt.executeQuery();
			if(rs.next()) {
				Board board = new Board();
				
				board.setId(rs.getInt("id"));
				board.setUserId(rs.getInt("userId"));
				board.setTitle(rs.getString("title"));
				board.setContent(rs.getString("content"));
				board.setReadCount(rs.getInt("readCount"));
				board.setCreateDate(rs.getTimestamp("createDate"));

				return board;
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBClose.close(conn, pstmt, rs);
		}

		return null;
	}
	
	public int increaseReadCount(int id) {
		conn = DBConn.getConnection();
		
		final String SQL = "UPDATE board SET readCount = readCount + 1 WHERE id=?";
		
		try {
			
			pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,id);
			int result = pstmt.executeUpdate();
			return result;
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBClose.close(conn, pstmt);
		}

		return -1;
	}
	
}
